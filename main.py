import os
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

#logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

conn = sqlite3.connect("notes.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT NOT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS reminders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT NOT NULL,
    remind_time DATETIME NOT NULL
)
""")
conn.commit()

@dp.message(Command("start", "help"))
async def send_welcome(message: Message):
    instructions = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìå /add [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "üóë /delete [—Ç–µ–∫—Å—Ç] ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
        "üìú /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚è∞ /remind [–º–∏–Ω—É—Ç—ã] [—Ç–µ–∫—Å—Ç] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
    )
    await message.answer(instructions)

@dp.message(Command("add"))
async def add_note(message: Message):
    note = message.text[len("/add "):].strip()
    if not note:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return
    cursor.execute("INSERT INTO notes (text) VALUES (?)", (note,))
    conn.commit()
    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {note}")

@dp.message(Command("delete"))
async def delete_note(message: Message):
    note = message.text[len("/delete "):].strip()
    cursor.execute("DELETE FROM notes WHERE text = ?", (note,))
    conn.commit()
    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {note}")

@dp.message(Command("remind"))
async def set_reminder(message: Message):
    try:
        parts = message.text.split(" ", 2)
        minutes = int(parts[1])
        text = parts[2]
        remind_time = datetime.now() + timedelta(minutes=minutes)
        cursor.execute("INSERT INTO reminders (text, remind_time) VALUES (?, ?)", (text, remind_time))
        conn.commit()
        scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[message.chat.id, text])
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: {text}")
    except (IndexError, ValueError):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remind 10 –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

async def send_reminder(chat_id, text):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç", callback_data=f"remind_again|{text}")]
        ]
    )
    await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("remind_again"))
async def remind_again(callback_query: types.CallbackQuery):
    text = callback_query.data.split("|", 1)[1]
    remind_time = datetime.now() + timedelta(minutes=5)
    scheduler.add_job(send_reminder, "date", run_date=remind_time, args=[callback_query.message.chat.id, text])
    await callback_query.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç!")

@dp.message(Command("list"))
async def list_notes(message: Message):
    cursor.execute("SELECT text FROM notes")
    notes = cursor.fetchall()
    if not notes:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        notes_text = "\n".join([note[0] for note in notes])
        await message.answer(f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes_text}")

async def main():
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())